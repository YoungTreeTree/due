// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gate.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gate_Bind_FullMethodName           = "/pb.Gate/Bind"
	Gate_Unbind_FullMethodName         = "/pb.Gate/Unbind"
	Gate_GetIP_FullMethodName          = "/pb.Gate/GetIP"
	Gate_Disconnect_FullMethodName     = "/pb.Gate/Disconnect"
	Gate_IsOnline_FullMethodName       = "/pb.Gate/IsOnline"
	Gate_GetID_FullMethodName          = "/pb.Gate/GetID"
	Gate_Stat_FullMethodName           = "/pb.Gate/Stat"
	Gate_Push_FullMethodName           = "/pb.Gate/Push"
	Gate_BatchPush_FullMethodName      = "/pb.Gate/BatchPush"
	Gate_Multicast_FullMethodName      = "/pb.Gate/Multicast"
	Gate_BatchMulticast_FullMethodName = "/pb.Gate/BatchMulticast"
	Gate_Broadcast_FullMethodName      = "/pb.Gate/Broadcast"
	Gate_BatchBroadcast_FullMethodName = "/pb.Gate/BatchBroadcast"
)

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateClient interface {
	// 绑定用户与连接
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error)
	// 解绑用户与连接
	Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error)
	// 获取客户端IP
	GetIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPReply, error)
	// 断开连接
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error)
	// 是否在线
	IsOnline(ctx context.Context, in *IsOnlineRequest, opts ...grpc.CallOption) (*IsOnlineReply, error)
	// 获取ID
	GetID(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdReply, error)
	// 推送广播消息
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// 推送消息
	Push(ctx context.Context, opts ...grpc.CallOption) (Gate_PushClient, error)
	// 批量推送消息
	BatchPush(ctx context.Context, in *BatchPushRequest, opts ...grpc.CallOption) (*BatchPushReply, error)
	// 推送组播消息
	Multicast(ctx context.Context, opts ...grpc.CallOption) (Gate_MulticastClient, error)
	// 批量推送组播消息
	BatchMulticast(ctx context.Context, in *BatchMulticastRequest, opts ...grpc.CallOption) (*BatchMulticastReply, error)
	// 推送广播消息
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (Gate_BroadcastClient, error)
	// 批量推送广播消息
	BatchBroadcast(ctx context.Context, in *BatchBroadcastRequest, opts ...grpc.CallOption) (*BatchBroadcastReply, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, Gate_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error) {
	out := new(UnbindReply)
	err := c.cc.Invoke(ctx, Gate_Unbind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPReply, error) {
	out := new(GetIPReply)
	err := c.cc.Invoke(ctx, Gate_GetIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error) {
	out := new(DisconnectReply)
	err := c.cc.Invoke(ctx, Gate_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) IsOnline(ctx context.Context, in *IsOnlineRequest, opts ...grpc.CallOption) (*IsOnlineReply, error) {
	out := new(IsOnlineReply)
	err := c.cc.Invoke(ctx, Gate_IsOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetID(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdReply, error) {
	out := new(GetIdReply)
	err := c.cc.Invoke(ctx, Gate_GetID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, Gate_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Push(ctx context.Context, opts ...grpc.CallOption) (Gate_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gate_ServiceDesc.Streams[0], Gate_Push_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatePushClient{stream}
	return x, nil
}

type Gate_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushReply, error)
	grpc.ClientStream
}

type gatePushClient struct {
	grpc.ClientStream
}

func (x *gatePushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatePushClient) CloseAndRecv() (*PushReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) BatchPush(ctx context.Context, in *BatchPushRequest, opts ...grpc.CallOption) (*BatchPushReply, error) {
	out := new(BatchPushReply)
	err := c.cc.Invoke(ctx, Gate_BatchPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Multicast(ctx context.Context, opts ...grpc.CallOption) (Gate_MulticastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gate_ServiceDesc.Streams[1], Gate_Multicast_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gateMulticastClient{stream}
	return x, nil
}

type Gate_MulticastClient interface {
	Send(*MulticastRequest) error
	CloseAndRecv() (*MulticastReply, error)
	grpc.ClientStream
}

type gateMulticastClient struct {
	grpc.ClientStream
}

func (x *gateMulticastClient) Send(m *MulticastRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateMulticastClient) CloseAndRecv() (*MulticastReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MulticastReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) BatchMulticast(ctx context.Context, in *BatchMulticastRequest, opts ...grpc.CallOption) (*BatchMulticastReply, error) {
	out := new(BatchMulticastReply)
	err := c.cc.Invoke(ctx, Gate_BatchMulticast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (Gate_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gate_ServiceDesc.Streams[2], Gate_Broadcast_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gateBroadcastClient{stream}
	return x, nil
}

type Gate_BroadcastClient interface {
	Send(*BroadcastRequest) error
	CloseAndRecv() (*BroadcastReply, error)
	grpc.ClientStream
}

type gateBroadcastClient struct {
	grpc.ClientStream
}

func (x *gateBroadcastClient) Send(m *BroadcastRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateBroadcastClient) CloseAndRecv() (*BroadcastReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BroadcastReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) BatchBroadcast(ctx context.Context, in *BatchBroadcastRequest, opts ...grpc.CallOption) (*BatchBroadcastReply, error) {
	out := new(BatchBroadcastReply)
	err := c.cc.Invoke(ctx, Gate_BatchBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
// All implementations must embed UnimplementedGateServer
// for forward compatibility
type GateServer interface {
	// 绑定用户与连接
	Bind(context.Context, *BindRequest) (*BindReply, error)
	// 解绑用户与连接
	Unbind(context.Context, *UnbindRequest) (*UnbindReply, error)
	// 获取客户端IP
	GetIP(context.Context, *GetIPRequest) (*GetIPReply, error)
	// 断开连接
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error)
	// 是否在线
	IsOnline(context.Context, *IsOnlineRequest) (*IsOnlineReply, error)
	// 获取ID
	GetID(context.Context, *GetIdRequest) (*GetIdReply, error)
	// 推送广播消息
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// 推送消息
	Push(Gate_PushServer) error
	// 批量推送消息
	BatchPush(context.Context, *BatchPushRequest) (*BatchPushReply, error)
	// 推送组播消息
	Multicast(Gate_MulticastServer) error
	// 批量推送组播消息
	BatchMulticast(context.Context, *BatchMulticastRequest) (*BatchMulticastReply, error)
	// 推送广播消息
	Broadcast(Gate_BroadcastServer) error
	// 批量推送广播消息
	BatchBroadcast(context.Context, *BatchBroadcastRequest) (*BatchBroadcastReply, error)
	mustEmbedUnimplementedGateServer()
}

// UnimplementedGateServer must be embedded to have forward compatible implementations.
type UnimplementedGateServer struct {
}

func (UnimplementedGateServer) Bind(context.Context, *BindRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedGateServer) Unbind(context.Context, *UnbindRequest) (*UnbindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedGateServer) GetIP(context.Context, *GetIPRequest) (*GetIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedGateServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedGateServer) IsOnline(context.Context, *IsOnlineRequest) (*IsOnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOnline not implemented")
}
func (UnimplementedGateServer) GetID(context.Context, *GetIdRequest) (*GetIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (UnimplementedGateServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedGateServer) Push(Gate_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedGateServer) BatchPush(context.Context, *BatchPushRequest) (*BatchPushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPush not implemented")
}
func (UnimplementedGateServer) Multicast(Gate_MulticastServer) error {
	return status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (UnimplementedGateServer) BatchMulticast(context.Context, *BatchMulticastRequest) (*BatchMulticastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMulticast not implemented")
}
func (UnimplementedGateServer) Broadcast(Gate_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedGateServer) BatchBroadcast(context.Context, *BatchBroadcastRequest) (*BatchBroadcastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchBroadcast not implemented")
}
func (UnimplementedGateServer) mustEmbedUnimplementedGateServer() {}

// UnsafeGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServer will
// result in compilation errors.
type UnsafeGateServer interface {
	mustEmbedUnimplementedGateServer()
}

func RegisterGateServer(s grpc.ServiceRegistrar, srv GateServer) {
	s.RegisterService(&Gate_ServiceDesc, srv)
}

func _Gate_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Unbind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Unbind(ctx, req.(*UnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_GetIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetIP(ctx, req.(*GetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_IsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).IsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_IsOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).IsOnline(ctx, req.(*IsOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_GetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetID(ctx, req.(*GetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServer).Push(&gatePushServer{stream})
}

type Gate_PushServer interface {
	SendAndClose(*PushReply) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type gatePushServer struct {
	grpc.ServerStream
}

func (x *gatePushServer) SendAndClose(m *PushReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatePushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gate_BatchPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).BatchPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_BatchPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).BatchPush(ctx, req.(*BatchPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Multicast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServer).Multicast(&gateMulticastServer{stream})
}

type Gate_MulticastServer interface {
	SendAndClose(*MulticastReply) error
	Recv() (*MulticastRequest, error)
	grpc.ServerStream
}

type gateMulticastServer struct {
	grpc.ServerStream
}

func (x *gateMulticastServer) SendAndClose(m *MulticastReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateMulticastServer) Recv() (*MulticastRequest, error) {
	m := new(MulticastRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gate_BatchMulticast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).BatchMulticast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_BatchMulticast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).BatchMulticast(ctx, req.(*BatchMulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServer).Broadcast(&gateBroadcastServer{stream})
}

type Gate_BroadcastServer interface {
	SendAndClose(*BroadcastReply) error
	Recv() (*BroadcastRequest, error)
	grpc.ServerStream
}

type gateBroadcastServer struct {
	grpc.ServerStream
}

func (x *gateBroadcastServer) SendAndClose(m *BroadcastReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateBroadcastServer) Recv() (*BroadcastRequest, error) {
	m := new(BroadcastRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gate_BatchBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).BatchBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_BatchBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).BatchBroadcast(ctx, req.(*BatchBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gate_ServiceDesc is the grpc.ServiceDesc for Gate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _Gate_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _Gate_Unbind_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Gate_GetIP_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Gate_Disconnect_Handler,
		},
		{
			MethodName: "IsOnline",
			Handler:    _Gate_IsOnline_Handler,
		},
		{
			MethodName: "GetID",
			Handler:    _Gate_GetID_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Gate_Stat_Handler,
		},
		{
			MethodName: "BatchPush",
			Handler:    _Gate_BatchPush_Handler,
		},
		{
			MethodName: "BatchMulticast",
			Handler:    _Gate_BatchMulticast_Handler,
		},
		{
			MethodName: "BatchBroadcast",
			Handler:    _Gate_BatchBroadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Gate_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Multicast",
			Handler:       _Gate_Multicast_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Broadcast",
			Handler:       _Gate_Broadcast_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gate.proto",
}
